{
  "name": "Domino-js",
  "tagline": "NodeJS implementation of Domino pattern",
  "body": "# DominoJS\r\n\r\nThis describes the global pattern of Domino.\r\n\r\n## Domino Client Service\r\n\r\nThe client service is the library to be embeded in your front end,\r\nweb-browser loaded application. It simplifies the communication\r\nwith the front facing web service.\r\n\r\n### Action\r\n\r\nAction sends a message to an actor. The action returns a promise.\r\n\r\nAction accepts a third optional callback argument. This argument is being\r\ntriggered when the actor sends back a response.notify\r\n\r\n#### Action Callback Signature\r\n\r\n```js\r\nfunction myAction(message, response, dispatch) {\r\n  // ...\r\n}\r\n```\r\n\r\n#### Example\r\n\r\n```js\r\n// Action creating Foo\r\nfunction createFoo (foo){\r\n  domino.action('foo.create', foo, progress)\r\n  .then((payload) => toaster.success('Foo has been created'))\r\n  .catch((err) => console.error(err))\r\n}\r\n\r\nfunction progress(payload){\r\n  console.log('some progress...', payload)\r\n}\r\n\r\n```\r\n\r\n### Subscription\r\n\r\nFront end can subscribe to broadcasted messages. wildcard can be used\r\nto replace one word. Subscription also accepts interpolation using context\r\nvariables.\r\n\r\nChanging context variable will automatically unsubscribe from the previous\r\nchannels and subscribe to the new ones.\r\n\r\n#### Example\r\n\r\n```js\r\nimport FooActions from './FooActions'\r\nimport domino from '../domino'\r\n\r\n\r\nfunction fooEventHandler(payload, type){\r\n  switch(type){\r\n    case 'foo.adCreated':\r\n      FooActions.adCreated(payload)\r\n      break;\r\n    case 'foo.adUpdated':\r\n      FooActions.adUpdated(payload)\r\n      break;\r\n  }\r\n}\r\n\r\ndomino.register('foo.*', fooEventHandler);\r\n\r\n// using string interpolation\r\ndomino.register('[account_id].*', accountEventHandler);\r\ndomino.setContext({account_id: '123'})\r\n```\r\n\r\n### Connection loss\r\n\r\nIn case of connection loss, the registration should re-establish\r\nsubscription upon reconnection.\r\n\r\n## Domino Front Service\r\n\r\nThis is the front facing service, exposing socket.io and rest\r\nAPI endpoints.\r\n\r\n### Rest Endpoint\r\n\r\nREST point are being constructed based on desconstruction of the\r\naction.\r\n\r\n\r\n.ie `'foo.bar'` would become available at `/foo/bar/` as a POST request.\r\n\r\n\r\n### Socket\r\n\r\nSocket allows frontend to receive pushed data from the watchers when\r\nthey broadcast information on a given channel.\r\n\r\n\r\n### Middleware\r\n\r\nGlobal middleware can be defined\r\n\r\n```js\r\nfunction fooMiddleware(message, request){\r\n  const augmentedMessage = Object.assign({}, message, {foo: 'bar'})\r\n  request.resolve(augmentedMessage);\r\n}\r\n\r\ndomino.use(fooMiddleware)\r\n```\r\n\r\nSub-domain middleware:\r\n\r\n```js\r\nfunction middleware(message, request){\r\n  if(message.foo){\r\n    request.resolve(message);\r\n  } else {\r\n    request.reject(message)\r\n  }\r\n}\r\n\r\ndomino.domain('foo')\r\n  .use(middleware)\r\n  .actor(...)\r\n```\r\n\r\n\r\n## Domino Back Service\r\n\r\nThis handles actors and watchers. Worker can also be created\r\nhere. While possible to instanciate a dispatcher, is is not\r\nrecommended to dispatch information from a worker but instead\r\nto call other publicly available actors with a payload when requiring\r\nto dispatch an information.\r\n\r\n### Actors\r\n\r\nActors are the recipients of actions. They can respond to a request\r\nusing their response object. They announce mutation through their\r\ndispatch object. The dispatch is scoped to their domain only to enforce\r\na more predictive behavior.\r\n\r\n* an actor belongs to a domain and has a name\r\n\r\n#### Example\r\n\r\n```js\r\n// Actor definition\r\nfunction createBar(message, response, dispatch) {\r\n  myForm.submit(message.content.payload)\r\n    .then(function(record){\r\n      response.ok({message: 'Creation successful'})\r\n      // will dispatch bar.created (bar being the domain)\r\n      dispatch('created', record)\r\n    })\r\n    .catch(function(err){\r\n      response.error(err)\r\n    })\r\n}\r\n\r\n// Register the actor on the bar domain, it will be\r\n// triggered by the 'bar.createFoo' action.\r\ndomino.domain('bar')\r\n  .actor('create', createBar)\r\n```\r\n\r\n### Watchers\r\n\r\nWatchers receive dispatched data by the actors:\r\n\r\n* a watcher belongs to a domain and has a name\r\n* a watcher listens to one or more channels dispatch\r\n\r\n#### Example\r\n\r\n```js\r\n// Watcher definition\r\nfunction barCreateWatcher(message, broadcast) {\r\n  // will broadcast on 'foo.created' (foo being the domain)\r\n  broadcast('created', message.content.payload)\r\n}\r\n\r\n// Register the watcher. It will be called when 'bar.created'\r\n// message is being dispacthed by an actor.\r\ndomino.domain('foo')\r\n  .watcher('barCreateWatcher', barCreateWatcher, ['bar.created'])\r\n```\r\n\r\n\r\n## Domino Messenger Service\r\n\r\nAct as a wrapper around a given messenging queue service. RabbitMQ will\r\nbe the first to be integrated here.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}